- name: Provision Bacalhau
  remote_user: ubuntu
  hosts: "{{ target_hosts | default('tag_Type_compute') }}"
  vars:
    nvidia_distribution: ubuntu2204
    nvidia_container_toolkit_key_path: /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
    ipfs_path: /opt/local/ipfs
  environment:
    IPFS_PATH: "{{ ipfs_path }}"
  tasks:
    # Must provide limit flag to ensure running against correct environment
    - fail:
        msg: "you must use -l or --limit"
      when: ansible_limit is not defined
      run_once: true

    - name: Run common tasks
      ansible.builtin.include_tasks: tasks/common_tasks.yaml

    # Docker
    - name: Add Docker GPG key
      become: true
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/trusted.gpg.d/docker.asc

    - name: Add Docker Repository
      become: true
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present

    - name: Create the docker group
      become: true
      ansible.builtin.group:
        name: docker

    - name: Add ubuntu user to docker group
      become: true
      ansible.builtin.user:
        name: ubuntu
        groups: docker

    # Nvidia
    - name: Get Nvidia drivers apt key
      ansible.builtin.get_url:
        url: https://developer.download.nvidia.com/compute/cuda/repos/{{ nvidia_distribution }}/x86_64/cuda-keyring_1.0-1_all.deb
        dest: /tmp/cuda-keyring.deb

    - name: Add Nvidia Keyring
      become: true
      ansible.builtin.apt:
        deb: /tmp/cuda-keyring.deb

    - name: Get Nvidia Container Tookit GPG key
      become: true
      ansible.builtin.shell:
        cmd: curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | gpg --yes --dearmor -o {{ nvidia_container_toolkit_key_path }}
        creates: "{{ nvidia_container_toolkit_key_path }}"

    - name: Add Nvidia Container Tookit Repository
      become: true
      ansible.builtin.apt_repository:
        repo: deb [signed-by={{ nvidia_container_toolkit_key_path }}] https://nvidia.github.io/libnvidia-container/stable/ubuntu18.04/$(ARCH) /
        state: present

    - name: Install required system packages
      become: true
      ansible.builtin.apt:
        pkg:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
          - cuda-drivers
        update_cache: true

    - name: Install Nvidia Container Tookit
      become: true
      ansible.builtin.apt:
        pkg:
          - nvidia-docker2
      notify:
        - Restart docker

    - name: Ensure Nvidia persitence daemon is started
      ansible.builtin.systemd:
        name: nvidia-persistenced

    - name: Install Golag
      become: true
      vars:
        go_version: 1.20.3
      block:
        - name: Download Go binary
          ansible.builtin.get_url:
            url: https://go.dev/dl/go{{ go_version }}.linux-amd64.tar.gz
            dest: /tmp/go-binary.tar.gz
        - name: Unzip Go binary
          ansible.builtin.command:
            cmd: tar -C /usr/local -xzf /tmp/go-binary.tar.gz

    - name: Install IPFS
      ansible.builtin.get_url:
        url: https://dist.ipfs.tech/kubo/v0.18.0/kubo_v0.18.0_linux-amd64.tar.gz
        dest: /tmp/ipfs.tar.gz

    - name: Make a folder to put IPFS files in
      ansible.builtin.file:
        path: /tmp/ipfs
        state: directory

    - name: Unzip IPFS
      become: true
      ansible.builtin.unarchive:
        remote_src: true
        src: /tmp/ipfs.tar.gz
        dest: /tmp/ipfs

    - name: Install Kubo
      become: true
      ansible.builtin.command: /tmp/ipfs/kubo/install.sh

    - name: Create IPFS directory
      become: true
      ansible.builtin.file:
        owner: ubuntu
        group: ubuntu
        path: /opt/local/ipfs
        state: directory

    - name: Put the IPFS directory in env for future shells
      become: true
      ansible.builtin.lineinfile:
        path: /etc/environment
        line: IPFS_PATH={{ ipfs_path }}

    - name: Initiazlie IPFS
      ansible.builtin.command:
        cmd: ipfs init
        creates: "{{ ipfs_path }}/config"

    - name: Configure IPFS
      ansible.builtin.shell: |
        ipfs config Addresses.API /ip4/0.0.0.0/tcp/5001
        ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/8080
        ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '["PUT", "POST"]'
        ipfs config Pinning.Recursive true

    - name: Install the IPFS systemd unit
      become: true
      ansible.builtin.template:
        src: files/ipfs.service
        dest: /etc/systemd/system
      notify:
        - Systemd Daemon Reload

    - name: Enable and start the IPFS Daemon
      become: true
      ansible.builtin.service:
        name: ipfs
        state: started
        enabled: true

    - name: Install Bacalhau
      ansible.builtin.shell:
        cmd: curl -sL https://get.bacalhau.org/install.sh | bash

    - name: Bump System Resources
      become: true
      ansible.builtin.command: sysctl -w net.core.rmem_max=2500000

    - name: Install the Bacalhau systemd unit
      become: true
      ansible.builtin.template:
        src: files/bacalhau.service
        dest: /etc/systemd/system
      vars:
        owner: labdao
        ipfs_connect: /ip4/127.0.0.1/tcp/5001
      notify:
        - Restart Bacalhau

    - name: Systemd Daemon Reload
      become: true
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Pull common containers
      ansible.builtin.include_tasks: tasks/pull_common_containers.yaml

  handlers:
    - name: Restart docker
      become: true
      ansible.builtin.service:
        name: docker
        state: restarted

    - name: Restart Bacalhau
      become: true
      ansible.builtin.service:
        name: bacalhau
        state: restarted
        enabled: true
