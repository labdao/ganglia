#!/bin/bash
set -eoux pipefail

# Exit early if node hasn't been up long enough
uptime_seconds=$(awk '{print $1}' /proc/uptime | cut -d '.' -f1)
threshold=$((30 * 60)) # 30 minutes

if [ "${uptime_seconds}" -lt "${threshold}" ]; then
    echo "System has been up for less than ${threshold}. Exiting the script..."
    exit
fi

terminate() {
  echo "Terminating instance" | tee -a /var/log/instance-terminator.log

  # Remove from instance protection before terminating the instance
  aws autoscaling set-instance-protection \
    --region "{{ ansible_ec2_placement_region }}" \
    --instance-id "{{ ansible_ec2_instance_id }}" \
    --auto-scaling-group-name "{{ ansible_ec2_tags_instance_aws_autoscaling_groupName }}" \
    --no-protected-from-scale-in | tee -a /var/log/instance-terminator.log

  # Terminate the instance and also reduce desired-capacity
  aws autoscaling terminate-instance-in-auto-scaling-group \
    --region "{{ ansible_ec2_placement_region }}" \
    --instance-id "{{ ansible_ec2_instance_id }}" \
    --should-decrement-desired-capacity | tee -a /var/log/instance-terminator.log
}

mark_as_unhealthy() {
  echo "Mark instance as unhealthy" | tee -a /var/log/instance-terminator.log
  aws autoscaling set-instance-health \
    --region "{{ ansible_ec2_placement_region }}" \
    --instance-id "{{ ansible_ec2_instance_id }}" \
    --health-status Unhealthy | tee -a /var/log/instance-terminator.log
}

query_bacalhau_node_info() {
  curl --fail --silent "http://127.0.0.1:1234/api/v1/node_info" | jq -r ".ComputeNodeInfo.$1"
}

aws_autoscaling_describe() {
  aws autoscaling describe-auto-scaling-groups \
  --auto-scaling-group-names "{{ ansible_ec2_tags_instance_aws_autoscaling_groupName }}" \
  --region "{{ ansible_ec2_placement_region }}" | jq -r ".AutoScalingGroups[].$1"
}

# Seconds
COOLOFF_PERIOD="120"

echo "Running script - $(date)" | tee -a /var/log/instance-terminator.log

ASG_MIN_SIZE=$(aws_autoscaling_describe "MinSize")
ASG_RUNNING_INSTANCES=$(aws_autoscaling_describe "Instances | length")

# if number of running instances is larger than min size
if [ "${ASG_RUNNING_INSTANCES}" -gt "${ASG_MIN_SIZE}" ]; then
  echo "ASG_MIN_SIZE=${ASG_MIN_SIZE}"  | tee -a /var/log/instance-terminator.log
  echo "ASG_RUNNING_INSTANCES=${ASG_RUNNING_INSTANCES}"  | tee -a /var/log/instance-terminator.log

  RUNNING_EXECUTIONS=$(query_bacalhau_node_info "RunningExecutions")
  ENQUEUED_EXECUTIONS=$(query_bacalhau_node_info "EnqueuedExecutions")

  # If nothing is running
  # and nothing is enqueued
  if [ "${RUNNING_EXECUTIONS}" -eq 0 ] && [ "${ENQUEUED_EXECUTIONS}" -eq 0 ]; then

    echo "Sleeping for ${COOLOFF_PERIOD} seconds" | tee -a /var/log/instance-terminator.log
    sleep ${COOLOFF_PERIOD}
    echo "Cool off finished"  | tee -a /var/log/instance-terminator.log

    AFTER_COOLOFF_RUNNING_EXECUTIONS=$(query_bacalhau_node_info "RunningExecutions")
    AFTER_COOLOFF_ENQUEUED_EXECUTIONS=$(query_bacalhau_node_info "EnqueuedExecutions")

    # If nothing is running
    # and nothing is enqueued
    # After cooloff period
    if [ "${AFTER_COOLOFF_RUNNING_EXECUTIONS}" -eq 0 ] && [ "${AFTER_COOLOFF_ENQUEUED_EXECUTIONS}" -eq 0 ]; then
      # Dump vars
      echo "AFTER_COOLOFF_RUNNING_EXECUTIONS=${AFTER_COOLOFF_RUNNING_EXECUTIONS}"  | tee -a /var/log/instance-terminator.log
      echo "AFTER_COOLOFF_ENQUEUED_EXECUTIONS=${AFTER_COOLOFF_ENQUEUED_EXECUTIONS}"  | tee -a /var/log/instance-terminator.log

      echo "Nothing running, turning off instance"  | tee -a /var/log/instance-terminator.log


      systemctl kill -s SIGKILL compute.service | tee -a /var/log/instance-terminator.log
      terminate || mark_as_unhealthy
    fi
  fi
fi
