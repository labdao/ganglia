- name: Bump System resources
  become: true
  ansible.posix.sysctl:
    name: net.core.rmem_max
    value: 2500000
    sysctl_file: /etc/sysctl.d/10-ipfs.conf

- name: Fetch AWS EC2 Metadata facts
  amazon.aws.ec2_metadata_facts:

- name: Create IPFS directory
  become: true
  ansible.builtin.file:
    path: "{{ ipfs_path }}/{{ item }}"
    state: directory
    recurse: true
  with_items:
    - "data"
    - "init"

- name: Push script for adding S3 DS to IPFS Config
  become: true
  ansible.builtin.template:
    src: files/ipfs/0001-bucket-config.sh
    dest: "{{ ipfs_path }}/init/0001-bucket-config.sh"
    mode: "0755"
  when:
    - ipfs_s3_backup is defined and ipfs_s3_backup

- name: Set custom init script
  become: true
  ansible.builtin.copy:
    dest: "{{ ipfs_path }}/init/0002-config.sh"
    content: |
      #!/bin/sh
      set -ex

      ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '["PUT", "POST"]'
      ipfs config Pinning.Recursive true
    mode: "0755"

- name: debug private_ipfs
  ansible.builtin.debug:
    msg: "Got private_ipfs={{ private_ipfs }}"

- name: Private IPFS
  when: private_ipfs is defined and private_ipfs | bool
  block:
    - name: Remove bootstrap when private mode
      become: true
      ansible.builtin.copy:
        dest: "{{ ipfs_path }}/init/0003-bootstrap-rm.sh"
        content: |
          #!/bin/sh
          set -ex

          ipfs bootstrap rm --all
        mode: "0755"

    - name: IPFS SSM keypath
      ansible.builtin.set_fact:
        ipfs_swarm_key_ssm_path: "/{{ ansible_ec2_tags_instance_Env }}/ipfs/swarm/key"

    - name: Try to fetch IPFS Swarm key from SSM
      ansible.builtin.set_fact:
        ipfs_swarm_key_ssm: "{{ lookup('aws_ssm', ipfs_swarm_key_ssm_path, region=ansible_ec2_placement_region, decrypt=True, on_missing=\"warn\") }}"

    - name: Set swarm key to the one fetched from SSM
      ansible.builtin.set_fact:
        ipfs_swarm_key: "{{ ipfs_swarm_key_ssm }}"
      when: ipfs_swarm_key_ssm | length > 0

    - name: Generate random key and store in SSM if one doesnt exists in SSM
      when: ipfs_swarm_key_ssm | length == 0
      block:
        - name: Generate random key if SSM parameter is empty
          ansible.builtin.set_fact:
            ipfs_swarm_key: "{{ lookup('community.general.random_string', length=64, override_all='0123456789abcdef') }}"

        - name: Set Swarm key in SSM
          community.aws.ssm_parameter:
            name: "{{ ipfs_swarm_key_ssm_path }}"
            description: "IPFS Swarm Key for environemnt {{ ansible_ec2_tags_instance_Env }}"
            string_type: "SecureString"
            value: "{{ ipfs_swarm_key }}"
            region: "{{ ansible_ec2_placement_region }}"

    - name: Put Swarm key in file
      become: true
      ansible.builtin.copy:
        content: |
          /key/swarm/psk/1.0.0/
          /base16/
          {{ ipfs_swarm_key }}
        dest: "{{ ipfs_path }}/data/swarm.key"
        mode: "0644"

- name: Deploy ipfs container
  become: true
  community.docker.docker_container:
    name: "ipfs"
    hostname: "ipfs"
    image: "quay.io/labdao/ipfs:{{ ipfs_version }}-ds-s3-3box"
      # env:
      # All this is now in template
      # AWS_REGION: "us-east-2"
      # CLUSTER_S3_BUCKET: "labdao-ipfs-bucket-{{ ansible_ec2_tags_instance_Env | lower }}"
        # CLUSTER_PEERNAME=<node_name>
        # ports:
        #   - 4001:4001
        #   - 5001:5001
    restart_policy: always
    state: started
    pull: false
    volumes:
      - '/opt/ipfs/data:/data/ipfs/'
      - '/opt/ipfs/init/:/container-init.d/'
    network_mode: "host"
    container_default_behavior: "compatibility"
