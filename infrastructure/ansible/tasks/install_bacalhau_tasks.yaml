# Try running Bacalhau first, to see what version it is.
- name: Check bacalhau version
  ansible.builtin.command: /usr/local/bin/bacalhau version
  register: existing_bacalhau_version
  ignore_errors: true
  changed_when: false
  no_log: true
  check_mode: false

- name: Set fact for currently installed version
  ansible.builtin.set_fact:
    bacalhau_installed_version: "{{ existing_bacalhau_version.stdout.split('Server Version: ')[1] }}"
  when: existing_bacalhau_version.stdout != ''

- name: Print installed kubo version
  ansible.builtin.debug:
    msg: "Installed bacalhau version: {{ bacalhau_installed_version }} vs {{ bacalhau_version }}"
  when: bacalhau_installed_version is defined

- name: Only do this if bacalhau isnt installed or upgrade is needed
  when: bacalhau_installed_version is undefined or bacalhau_installed_version != bacalhau_version
  block:
    - name: Download Bacalhau binary
      become: true
      ansible.builtin.unarchive:
        src: "https://github.com/bacalhau-project/bacalhau/releases/download/{{ bacalhau_version }}/bacalhau_{{ bacalhau_version }}_linux_amd64.tar.gz"
        dest: /usr/local/bin
        # Letting when condition control if needs installing/upgrading
        # creates: /usr/local/bin/bacalhau
        remote_src: "true"
      register: bacalhau_unarchive
      retries: 5
      delay: 3
      until: bacalhau_unarchive is succeeded

- name: Fetch AWS EC2 Metadata facts
  amazon.aws.ec2_metadata_facts:

- name: Print environment info
  ansible.builtin.debug:
    msg: "Running on environment: {{ ansible_ec2_tags_instance_Env }}"
  when: ansible_ec2_tags_instance_Env is defined

- name: Set fact when its prod node
  ansible.builtin.set_fact:
    requester_hostname: "requester.labdao.xyz"
    ipfs_hostname: "ipfs.labdao.xyz"
  when: ansible_ec2_tags_instance_Env is defined and ansible_ec2_tags_instance_Env | lower == "prod"

- name: Set fact when its non-prod node
  ansible.builtin.set_fact:
    requester_hostname: "requester.{{ ansible_ec2_tags_instance_Env | lower }}.labdao.xyz"
    ipfs_hostname: "ipfs.{{ ansible_ec2_tags_instance_Env | lower }}.labdao.xyz"
  when: ansible_ec2_tags_instance_Env is defined and ansible_ec2_tags_instance_Env | lower != "prod"

# Bacalhau PeerID, example `curl -s bacalhau.staging.labdao.xyz:1234/node_info | jq -r '.PeerInfo.ID'`
- name: Determine requester bacalhau peer id
  ansible.builtin.uri:
    url: "http://{{ requester_hostname }}:1234/node_info"
    return_content: true
  register: requester_output
  when: requester_hostname is defined and ansible_ec2_tags_instance_Type is defined and ansible_ec2_tags_instance_Type is match("compute.*")

- name: Set requester_peer url
  ansible.builtin.set_fact:
    # requester_peer: /dns4/requester.staging.labdao.xyz/tcp/1235/p2p/QmeLa2fx2FMNDWbeY3UqjELc1MbKwNxggcmdBmLZepY6VK
    requester_peer: "/dns4/{{ requester_hostname }}/tcp/1235/p2p/{{ requester_output.content | from_json | community.general.json_query('PeerInfo.ID') }}"
  when: requester_output is defined and ansible_ec2_tags_instance_Type is defined and ansible_ec2_tags_instance_Type is match("compute.*")

- name: Set ipfs connect url
  ansible.builtin.set_fact:
    ipfs_connect: "/dns4/{{ ipfs_hostname }}/tcp/5001"
  when: ipfs_hostname is defined

- name: Install the Bacalhau systemd unit
  become: true
  ansible.builtin.template:
    src: "files/{{ bacalhau_node_type }}.service"
    dest: /etc/systemd/system
  notify:
    - Restart Bacalhau

- name: Ensure Bacalhau is running
  become: true
  ansible.builtin.service:
    name: "{{ bacalhau_node_type }}"
    state: started
    enabled: true
