---

version: "3.7"

services:
  requester:
    image: "ghcr.io/bacalhau-project/bacalhau:v${BACALHAU_VERSION:-1.0.3}"
    hostname: requester
    command: serve --ipfs-connect '/dns4/ipfs/tcp/5001' --node-type requester,compute --private-internal-ipfs=false --peer none --labels "owner=labdao" --job-selection-probe-http "http://receptor:8080/judge"
    environment:
      # BACALHAU_ENVIRONMENT: production
      LOG_LEVEL: trace
      BACALHAU_SERVE_IPFS_PATH: /tmp/lilypad/data/ipfs
    ports:
      - 1234:1234
      - 1235:1235
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/lilypad/data/ipfs
        # - /tmp:/tmp
    depends_on:
      ipfs:
        condition: service_healthy

  # sidecar container for requester healthcheck
  requester_health:
    image: "alpine"
    command: sh -c 'apk add curl && sleep infinity'
    depends_on:
      requester:
        condition: service_started
    healthcheck:
      test: curl -f http://requester:1234/api/v1/healthz
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s

  # geth
  geth:
    image: "ethereum/client-go"
    hostname: geth
    command: --datadir /data/geth --dev --ws --ws.api web3,eth,net --ws.addr 0.0.0.0 --ws.port 8546 --ws.origins '*' --http --http.api web3,eth,net --http.addr 0.0.0.0 --http.corsdomain '*' --http.port 8545 --http.vhosts '*'
    environment:
      # BACALHAU_ENVIRONMENT: production
      LOG_LEVEL: trace
    ports:
      - 8545:8545
      - 8546:8546
    volumes:
      - geth:/data/geth

  # lilypad-setup
  lilypad-setup:
    image: "node:20"
    hostname: lilypad-setup
    command: --datadir /data/geth --dev --ws --ws.api web3,eth,net --ws.addr 0.0.0.0 --ws.port 8546 --ws.origins '*' --http --http.api web3,eth,net --http.addr 0.0.0.0 --http.corsdomain '*' --http.port 8545 --http.vhosts '*'
    volumes:
      - lilypad:/app/lilypad

  # solver
  # mediator
  # resource-provider
  # job-creator

  dbbackend:
    image: "postgres:15.4"
    command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]
    environment:
      POSTGRES_PASSWORD: labdao
      POSTGRES_USER: labdao
      POSTGRES_DB: backend
    ports:
      - 5432:5432
    volumes:
      - dbdata-backend:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U postgres  || exit 1
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s

  backend:
    build:
      context: .
      cache_from:
        - quay.io/labdao/backend:latest
      args:
        BACALHAU_VERSION: ${BACALHAU_VERSION:-1.1.4}
    ports:
      - 8080:8080
    environment:
      POSTGRES_PASSWORD: labdao
      POSTGRES_USER: labdao
      POSTGRES_DB: backend
      POSTGRES_HOST: dbbackend
      BACALHAU_API_HOST: requester
      IPFS_API_HOST: ipfs
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    depends_on:
      dbbackend:
        condition: service_healthy
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8080/healthcheck || exit 1
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s

  frontend:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
      cache_from:
        - quay.io/labdao/frontend:latest
      args:
        NEXT_PUBLIC_PRIVY_APP_ID: ${NEXT_PUBLIC_PRIVY_APP_ID:-clo7adk6w07q7jq0f08yrnkur}
        NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL:-http://localhost:8080}
        NEXT_PUBLIC_IPFS_GATEWAY_ENDPOINT: ${NEXT_PUBLIC_IPFS_GATEWAY_ENDPOINT:-http://localhost:8888/ipfs/}
    environment:
      NODE_ENV: 'production'
    ports:
      - 3000:3000

  dbreceptor:
    image: "postgres:15.4"
    command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]
    environment:
      POSTGRES_PASSWORD: labdao
      POSTGRES_USER: labdao
      POSTGRES_DB: receptor
    volumes:
      - dbdata-receptor:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U postgres  || exit 1
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s

  receptor:
    build:
      context: ./receptor
      dockerfile: ./Dockerfile
      cache_from:
        - quay.io/labdao/receptor:latest
    x-develop:
      watch:
        - action: rebuild
          path: ./receptor
    environment:
      PGHOST: dbreceptor
      PGUSER: labdao
      PGPASSWORD: labdao
      PGDATABASE: receptor
      PGSSLMODE: disable
    depends_on:
      dbreceptor:
        condition: service_healthy

  ipfs:
    hostname: ipfs
    build:
      context: ./docker/images/ipfs
      dockerfile: ./Dockerfile
      cache_from:
        - quay.io/labdao/ipfs:latest
    volumes:
      - ipfs:/data/ipfs
    environment:
      IPFS_LOGGING: "debug"
      IPFS_GATEWAY_PORT: "8888"
      IPFS_DEBUG: "true"
    ports:
      - 4001:4001
      - 5001:5001
      - 8888:8888

volumes:
  dbdata-backend:
  dbdata-receptor:
  ipfs:
  geth:
  lilypad:
