---

services:
  #   # sidecar container for setting up required key material
  #   requester_setup:
  #     image: "alpine"
  #     command: >
  #       sh -c '
  #       mkdir -p /home/nonroot/.bacalhau &&
  #       echo CAASqAkwggSkAgEAAoIBAQDQubr6zD3DLEQ07K2wPUQEFfVQLfqTQihc8lQOWuihElXcqZJLajK4od5zc+nCQ/jyUmrmOsYd7aKBmXfyTwOBwCaXEpqqxlP+Pal/Ruh+Ptpfl11KP4sHg3P5sYM/bMRJrEtg1k3mbaToioH5I9GrH7zv5LDHUSezbYFCJ4ZyakUgal+GXPx+TpbdhIx93pZXPHzxgd/m1rbSyiR7sUqXAokzKf2Qv1sOnGrHHcKy8DiSrXo+YUyDRC3lQKwaSfyrBFq1BLqE+E383zYIc5yhcV3kSGivQ2v9o67jEbss3f3ogEfXplsAnBh1S+RfcfneUaRs/UC/+8kyWAC0sU1ZAgMBAAECggEAHZZWZPrSvnnl6UKrlFH69EFQlt8NqBY2toY7WBWW6E47EZ6P+FTDf9yiNed2eW09OsxoDt7B+rgW0xw4HocIzjm4vq2Kcy7N9To0brBUgKDUP7yrIr1DLft6UyjQnAsFABSGUuHOBR4BxFzt860aKZHELJVUYcylPhAFxKTpsAoSy68/Zfkz5wjGtC/ImcHIwGub7NKNmbouQQe6p4beOkYmyVsX6RL/7RPMi7Jvspq0nj0V0j/T13XBUH4b862cqs54HuJQjI9j4QijA9SuCySXQfJw2If8sM7z/3w+IwYhp2JIu4oMTIppCvTBgzAmh+7OMqfOlL7av9iMmqQiAQKBgQDyDtX4TxN1JiFdJg8L3AV8e53GE2eAGY7zpiN7CDrACDXeyrni8fIVz4wY5Pf7+E49dI1S67dsyHVb2dK6Gg4tyECXoRHYPMRktw8LJf9QfCfYsGrpoj/yq2UZ5SqU1Uh70h3b7W3vdZXPZO1BBzT2iwTPGQl/0I0bunSTl72gYQKBgQDcv2etOyDp72NaiZduLpia0RVc92MAZLyoWyq4rscfjU0MvkCPyTa6sKjF2uaUDS5R8yVHB/6+2Mzs4LuWWpNtp6b3rG88CXxfbGDIYn2BOXDqQ9s2/ceISkNMq+NbfcUbbNvG920Ot20VKjkl9s7LcEC0cLiVU14oWd8BOV6v+QKBgQDWOk8g7ktYOSD6Ib7bTiUE4RrnvTCy7OvZs8ZfEw97+UhEH8OYmW0Z5JAnUC4xsLb+KPMS2k+CVX+YhRW9Y2X9GugfyovShyWBxYno4f4uq1NQsgJNOC3EhfB6lJm1E3aNL48BoAbWEYk+/iIElW5IbQ0ahRwlJNxeGA0ouvk2wQKBgQDZYfwdEa9V8BItJHXlYSmSu/eHt27dAlbui+jEOgmJPsLzm59EeWfV7QYm4WxTu68zsHezPWJWWnVjh+PzKnsobwLzv/FCdCzwY2/jpWnmicRyTiRgQQXvZwJjTJn2jSI/4bGEfD//UA6x2wSwKB55JK/zgVWkZ5a/sdD0CaT/MQKBgA7CMHQIjXl8FqATmBgiejGV6BnbUHko4m0Ab7fQUZY1qlgKrqcXgFmMQkb+p8Og1YeVn8Qy8xuvueAfwemA8OxvLuQNzQcA2qhGZID4Tu2Ng+XIkNxMj1gJelppqVeDnZSFr3TbZcSXIVhk1idAnpGDilS8cOO6LUY/hH/IVGGe > /home/nonroot/.bacalhau/private_key.1235 &&
  #       chown -R 65532:65532 /home/nonroot/'
  #     volumes:
  #       - requestervolume:/home/nonroot/
  #
  #   requester:
  #     image: "ghcr.io/bacalhau-project/bacalhau:v1.0.3"
  #     hostname: requester
  #     command: serve --ipfs-connect '/dns4/ipfs/tcp/5001' --node-type requester --private-internal-ipfs=false --peer none --labels "owner=labdao"
  #     volumes:
  #       - requestervolume:/home/nonroot/
  #     environment:
  #       # BACALHAU_ENVIRONMENT: production
  #       LOG_LEVEL: trace
  #     ports:
  #       - 1234:1234
  #       - 1235:1235
  #     depends_on:
  #       ipfs:
  #         condition: service_healthy
  #       requester_setup:
  #         condition: service_completed_successfully
  #
  #   # sidecar container for requester healthcheck
  #   requester_health:
  #     image: "alpine"
  #     command: sh -c 'apk add curl && sleep infinity'
  #     depends_on:
  #       requester:
  #         condition: service_started
  #     healthcheck:
  #       test: curl -f http://requester:1234/readyz
  #       interval: 10s
  #       timeout: 10s
  #       retries: 10
  #       start_period: 10s
  #
  #   compute:
  #     image: "ghcr.io/bacalhau-project/bacalhau:v1.0.3"
  #     hostname: compute
  #     user: root
  #     command: serve --ipfs-connect '/dns4/ipfs/tcp/5001' --node-type compute --labels "owner=labdao" --private-internal-ipfs=false --peer "/dns4/requester/tcp/1235/p2p/Qmd2oBsjjvtUYRmb7zhDEPhSf9YbxA1a7ZLZ6hyCwMqpnh"
  #     environment:
  #       LOG_LEVEL: trace
  #       DOCKER_DEFAULT_PLATFORM: linux/amd64
  #     volumes:
  #       - /var/run/docker.sock:/var/run/docker.sock
  #       - /tmp:/tmp
  #     depends_on:
  #       ipfs:
  #         condition: service_healthy
  #       requester:
  #         condition: service_started
  #       requester_health:
  #         condition: service_healthy
  #
  #   # sidecar container for compute healthcheck
  #   compute_health:
  #     image: "alpine"
  #     command: sh -c 'apk add curl && sleep infinity'
  #     depends_on:
  #       compute:
  #         condition: service_started
  #     healthcheck:
  #       test: curl -f http://compute:1234/readyz
  #       interval: 10s
  #       timeout: 10s
  #       retries: 10
  #       start_period: 10s

  # geth
  geth:
    image: "ethereum/client-go"
    hostname: geth
    command: --datadir /data/geth --dev --ws --ws.api web3,eth,net --ws.addr 0.0.0.0 --ws.port 8546 --ws.origins '*' --http --http.api web3,eth,net --http.addr 0.0.0.0 --http.corsdomain '*' --http.port 8545 --http.vhosts '*' --graphql
    environment:
      # BACALHAU_ENVIRONMENT: production
      LOG_LEVEL: trace
    volumes:
      - geth:/data/geth
    ports:
      - 8545:8545
      - 8546:8546
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8545 || exit 1
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s

  # lilypad-setup
  lilypad-setup:
    image: "node:20"
    command: >
      sh -x -c '
      apt-get -q update && apt-get -q -y install sudo &&
      rm -rf /tmp/lilypad/lilypad /tmp/geth &&
      wget --no-verbose https://gethstore.blob.core.windows.net/builds/geth-linux-amd64-${GETH_VERSION:-1.13.5-916d6a44}.tar.gz -O geth.tgz &&
      tar -zxvf geth.tgz &&
      mv geth-linux-amd64-${GETH_VERSION:-1.13.5-916d6a44}/geth /usr/local/bin/ &&
      mkdir -p /tmp/lilypad &&
      cd /tmp/lilypad/ &&
      git clone https://github.com/bacalhau-project/lilypad --branch ${LILYPAD_VERSION:-v2.0.0-e5c38d5} &&
      cd lilypad &&
      sed -i "s/localhost/geth/g" hardhat/hardhat.config.ts &&
      (cd hardhat && yarn install) &&
      ./stack print-env > .env &&
      echo "export WEB3_RPC_URL=ws://geth:8546" >> .env &&
      cp -rav .env /app/lilypad/.env &&
      . ./.env &&
      /usr/local/bin/geth --exec "eth.sendTransaction({from: eth.coinbase, to: \"$${ADMIN_ADDRESS}\", value: new web3.BigNumber(eth.getBalance(eth.coinbase)).minus(web3.toWei(1, \"ether\"))  })" attach "http://geth:8545" &&
      bash -x ./stack fund-services-ether &&
      bash -x ./stack deploy &&
      bash -x ./stack fund-services-tokens &&
      bash -x ./stack balances'
    environment:
      USER: root
    volumes:
      - lilypad:/app/lilypad
      - /usr/bin/docker:/usr/bin/docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/lilypad:/tmp/lilypad
    depends_on:
      geth:
        condition: service_healthy

  # solver
  lilypad-solver:
    build:
      context: ./docker/images/lilypad
      dockerfile: ./Dockerfile
      cache_from:
        - quay.io/labdao/lilypad:pr-802
      args:
        LILYPAD_VERSION: ${LILYPAD_VERSION:-v2.0.0-e5c38d5}
    hostname: lilypad-solver
    command: solver
    environment:
      SERVER_PORT: 8080
      SERVER_URL: http://lilypad-solver:8080
    volumes:
      - lilypad:/app/lilypad
    depends_on:
      geth:
        condition: service_healthy
      lilypad-setup:
        condition: service_completed_successfully

  # mediator
  lilypad-mediator:
    build:
      context: ./docker/images/lilypad
      dockerfile: ./Dockerfile
      cache_from:
        - quay.io/labdao/lilypad:pr-802
      args:
        LILYPAD_VERSION: ${LILYPAD_VERSION:-v2.0.0-e5c38d5}
    hostname: lilypad-mediator
    command: mediator
    environment:
      WEB3_PRIVATE_KEY: 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a
      WEB3_DIRECTORY_ADDRESS: 0x976EA74026E726554dB657fA54763abd0C3a0aa9
      SERVICE_SOLVER: 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC
    volumes:
      - lilypad:/app/lilypad
    depends_on:
      lilypad-solver:
        condition: service_started

  # resource-provider
  lilypad-resource-provider:
    build:
      context: ./docker/images/lilypad
      dockerfile: ./Dockerfile
      cache_from:
        - quay.io/labdao/lilypad:pr-802
      args:
        LILYPAD_VERSION: ${LILYPAD_VERSION:-v2.0.0-e5c38d5}
    hostname: lilypad-resource-provider
    command: resource-provider
    environment:
      WEB3_PRIVATE_KEY: 0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a
      SERVICE_SOLVER: 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC
      SERVICE_MEDIATORS: 0x90F79bf6EB2c4f870365E785982E1f101E93b906
    volumes:
      - lilypad:/app/lilypad
    depends_on:
      lilypad-mediator:
        condition: service_started

  # jobcreator
  lilypad-jobcreator:
    build:
      context: ./docker/images/lilypad
      dockerfile: ./Dockerfile
      cache_from:
        - quay.io/labdao/lilypad:pr-802
      args:
        LILYPAD_VERSION: ${LILYPAD_VERSION:-v2.0.0-e5c38d5}
    hostname: lilypad-jobcreator
    command: jobcreator
    environment:
      WEB3_PRIVATE_KEY: 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a
      SERVICE_SOLVER: 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC
      SERVICE_MEDIATORS: 0x90F79bf6EB2c4f870365E785982E1f101E93b906
    volumes:
      - lilypad:/app/lilypad
    depends_on:
      lilypad-resource-provider:
        condition: service_started

          #   dbbackend:
          #     image: "postgres:15.4"
          #     command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]
          #     environment:
          #       POSTGRES_PASSWORD: labdao
          #       POSTGRES_USER: labdao
          #       POSTGRES_DB: backend
          #     ports:
          #       - 5432:5432
          #     volumes:
          #       - dbdata-backend:/var/lib/postgresql/data
          #     healthcheck:
          #       test: pg_isready -U postgres  || exit 1
          #       interval: 10s
          #       timeout: 10s
          #       retries: 10
          #       start_period: 10s
          #
          #   backend:
          #     build:
          #       context: .
          #       cache_from:
          #         - quay.io/labdao/backend:latest
          #       args:
          #         BACALHAU_VERSION: ${BACALHAU_VERSION:-1.1.4}
          #     ports:
          #       - 8080:8080
          #     environment:
          #       POSTGRES_PASSWORD: labdao
          #       POSTGRES_USER: labdao
          #       POSTGRES_DB: backend
          #       POSTGRES_HOST: dbbackend
          #       BACALHAU_API_HOST: requester
          #       IPFS_API_HOST: ipfs
          #       FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
          #     depends_on:
          #       dbbackend:
          #         condition: service_healthy
          #     healthcheck:
          #       test: wget --no-verbose --tries=1 --spider http://localhost:8080/healthcheck || exit 1
          #       interval: 10s
          #       timeout: 10s
          #       retries: 10
          #       start_period: 10s
          #
          #   frontend:
          #     build:
          #       context: ./frontend
          #       dockerfile: ./Dockerfile
          #       cache_from:
          #         - quay.io/labdao/frontend:latest
          #       args:
          #         NEXT_PUBLIC_PRIVY_APP_ID: ${NEXT_PUBLIC_PRIVY_APP_ID:-clo7adk6w07q7jq0f08yrnkur}
          #         NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL:-http://localhost:8080}
          #         NEXT_PUBLIC_IPFS_GATEWAY_ENDPOINT: ${NEXT_PUBLIC_IPFS_GATEWAY_ENDPOINT:-http://localhost:8888/ipfs/}
          #     environment:
          #       NODE_ENV: 'production'
          #     ports:
          #       - 3000:3000
          #
          #   dbreceptor:
          #     image: "postgres:15.4"
          #     command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]
          #     environment:
          #       POSTGRES_PASSWORD: labdao
          #       POSTGRES_USER: labdao
          #       POSTGRES_DB: receptor
          #     volumes:
          #       - dbdata-receptor:/var/lib/postgresql/data
          #     healthcheck:
          #       test: pg_isready -U postgres  || exit 1
          #       interval: 10s
          #       timeout: 10s
          #       retries: 10
          #       start_period: 10s
          #
          #   receptor:
          #     build:
          #       context: ./receptor
          #       dockerfile: ./Dockerfile
          #       cache_from:
          #         - quay.io/labdao/receptor:latest
          #     x-develop:
          #       watch:
          #         - action: rebuild
          #           path: ./receptor
          #     environment:
          #       PGHOST: dbreceptor
          #       PGUSER: labdao
          #       PGPASSWORD: labdao
          #       PGDATABASE: receptor
          #       PGSSLMODE: disable
          #     depends_on:
          #       dbreceptor:
          #         condition: service_healthy
          #
          #   ipfs:
          #     hostname: ipfs
          #     build:
          #       context: ./docker/images/ipfs
          #       dockerfile: ./Dockerfile
          #       cache_from:
          #         - quay.io/labdao/ipfs:latest
          #     volumes:
          #       - ipfs:/data/ipfs
          #     environment:
          #       IPFS_LOGGING: "debug"
          #       IPFS_GATEWAY_PORT: "8888"
          #       IPFS_DEBUG: "true"
          #     ports:
          #       - 4001:4001
          #       - 5001:5001
          #       - 8888:8888

volumes:
  dbdata-backend:
  dbdata-receptor:
  ipfs:
  lilypad:
  requestervolume:
  geth:
