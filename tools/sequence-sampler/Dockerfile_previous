### with fix that does not work
# Start with a base image that has CUDA and Python
# FROM rapidsai/mambaforge-cuda:cuda11.8.0-base-ubuntu22.04-py3.9
# FROM docker.io/pytorch/pytorch:2.1.0-cuda11.8-cudnn8-runtime
FROM nvidia/cuda:11.8.0-devel-ubuntu22.04

# Install system dependencies
RUN apt-get update && apt-get install -y wget git nano less zip unzip && rm -rf /var/lib/apt/lists/*

# Install Miniforge to get mamba
RUN wget -qO Miniforge3-Linux-x86_64.sh https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh && \
    bash Miniforge3-Linux-x86_64.sh -b && \
    rm Miniforge3-Linux-x86_64.sh

# Set the full path to the mamba executable
ENV MAMBA_ROOT_PREFIX=/root/miniforge3
ENV PATH=$MAMBA_ROOT_PREFIX/bin:$PATH

# Set CUDA version and ColabFold version as arguments
ARG CUDA_VERSION=11.8.0
ARG COLABFOLD_VERSION=1.5.3

WORKDIR /app

# Install CUDA nvcc
RUN apt-get update && apt-get install -y cuda-nvcc-$(echo $CUDA_VERSION | cut -d'.' -f1,2 | tr '.' '-') --no-install-recommends --no-install-suggests && rm -rf /var/lib/apt/lists/*

# # Install colabfold, openmm, pdbfixer, and additional Python packages
# RUN mamba config --set auto_update_conda false && \
#     CONDA_OVERRIDE_CUDA=$(echo $CUDA_VERSION | cut -d'.' -f1,2) mamba install -y -c conda-forge -c bioconda colabfold=$COLABFOLD_VERSION jaxlib==*=cuda* openmm pdbfixer && \
#     mamba clean -afy
# Install colabfold, openmm, pdbfixer, and additional Python packages
RUN mamba create -n myenv -c conda-forge -c bioconda \
    colabfold=$COLABFOLD_VERSION \
    jaxlib \
    openmm \
    pdbfixer \
    && mamba clean -afy

# Activate the environment in subsequent commands
ENV PATH /root/miniforge3/envs/myenv/bin:$PATH

# Install transformers, PyTorch and other requirements
COPY requirements.txt .
RUN pip install -r requirements.txt

# Set environment variables
ENV PATH /usr/local/envs/colabfold/bin:$PATH
ENV MPLBACKEND Agg
VOLUME cache
ENV MPLCONFIGDIR /cache
ENV XDG_CACHE_HOME /cache
ENV DGLBACKEND="pytorch"

# Additional installations (if needed)
RUN pip install hydra-core omegaconf pandas biopython pyyaml

# Install prodigy
RUN git clone -q https://github.com/haddocking/prodigy && \
     pip install -q prodigy/

# Install additional Python packages
RUN pip install -q \
  dgl==1.0.2+cu116 -f https://data.dgl.ai/wheels/cu116/repo.html \
  torch==1.12.1+cu116 --extra-index-url https://download.pytorch.org/whl/cu116 \
  e3nn==0.3.3 \
  wandb==0.12.0 \
  pynvml==11.0.0 \
  git+https://github.com/NVIDIA/dllogger#egg=dllogger \
  decorator==5.1.0 \
  hydra-core==1.3.2 \
  pyrsistent==0.19.3 \
  hydra-core omegaconf pandas biopython pyyaml

# Copy the rest of your application
RUN pwd
RUN mkdir /app/RFdiffusion && git clone https://github.com/RosettaCommons/RFdiffusion.git /app/RFdiffusion

RUN mkdir /app/ProteinMPNN && git clone https://github.com/dauparas/ProteinMPNN /app/ProteinMPNN

# Install SE3Transformer
RUN pip install /app/RFdiffusion/env/SE3Transformer --no-deps 
# --no-cache-dir

# Install the RFdiffusion package without dependencies (as they are already installed)
RUN pip install /app/RFdiffusion --no-deps

# Download weights for colabfold
RUN python -m colabfold.download

# Copy in Files
COPY . /app

ENV PYTHONUNBUFFERED=1
ENV HYDRA_FULL_ERROR=1

# Label the container
LABEL container="seqoptim:rfdiff-mpnn"

# entrypoint
ENTRYPOINT ["python", "-u", "main.py"]


##### very old version
# Start with a base image that has CUDA and Python
FROM rapidsai/mambaforge-cuda:cuda11.8.0-base-ubuntu22.04-py3.9
# FROM docker.io/pytorch/pytorch:2.1.0-cuda11.8-cudnn8-runtime

# Install system dependencies
RUN apt-get update && apt-get install -y wget git nano less zip unzip && rm -rf /var/lib/apt/lists/*

# Set CUDA version and ColabFold version as arguments
ARG CUDA_VERSION=11.8.0
ARG COLABFOLD_VERSION=1.5.3

# WORKDIR /app

# Install CUDA nvcc
RUN apt-get update && apt-get install -y cuda-nvcc-$(echo $CUDA_VERSION | cut -d'.' -f1,2 | tr '.' '-') --no-install-recommends --no-install-suggests && rm -rf /var/lib/apt/lists/*

# Install colabfold, openmm, pdbfixer, and additional Python packages
RUN mamba config --set auto_update_conda false && \
    CONDA_OVERRIDE_CUDA=$(echo $CUDA_VERSION | cut -d'.' -f1,2) mamba install -y -c conda-forge -c bioconda colabfold=$COLABFOLD_VERSION jaxlib==*=cuda* openmm pdbfixer && \
    mamba clean -afy

# Install transformers, PyTorch and other requirements
COPY requirements.txt .
RUN pip install -r requirements.txt

# Copy the rest of your application
COPY . .

# Run test script
RUN chmod +x test.sh && ./test.sh

# Set environment variables
ENV PATH /usr/local/envs/colabfold/bin:$PATH
ENV MPLBACKEND Agg
VOLUME cache
ENV MPLCONFIGDIR /cache
ENV XDG_CACHE_HOME /cache

# Download weights for colabfold
RUN python -m colabfold.download

# Additional installations (if needed)
RUN pip install hydra-core omegaconf pandas biopython pyyaml

# Install prodigy
RUN git clone -q https://github.com/haddocking/prodigy && \
     pip install -q prodigy/

# # Copy in Files
# COPY . /app

# ENV PYTHONUNBUFFERED=1
# ENV HYDRA_FULL_ERROR=1


# # entrypoint
# ENTRYPOINT ["python", "-u", "main.py"]

# Label the container
LABEL container="sequence_sampler:rediff_mpnn_added"


# Usage: 
# git clone https://github.com/RosettaCommons/RFdiffusion.git
# cd RFdiffusion
# docker build -f docker/Dockerfile -t rfdiffusion .
# mkdir $HOME/inputs $HOME/outputs $HOME/models
# bash scripts/download_models.sh $HOME/models
# wget -P $HOME/inputs https://files.rcsb.org/view/5TPN.pdb

# docker run -it --rm --gpus all \
#   -v $HOME/models:$HOME/models \
#   -v $HOME/inputs:$HOME/inputs \
#   -v $HOME/outputs:$HOME/outputs \
#   rfdiffusion \
#   inference.output_prefix=$HOME/outputs/motifscaffolding \
#   inference.model_directory_path=$HOME/models \
#   inference.input_pdb=$HOME/inputs/5TPN.pdb \
#   inference.num_designs=3 \
#   'contigmap.contigs=[10-40/A163-181/10-40]'

FROM nvcr.io/nvidia/cuda:11.6.2-cudnn8-runtime-ubuntu20.04

COPY . /app/RFdiffusion/

RUN apt-get -q update \ 
  && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
  git \
  python3.9 \
  python3-pip \
  && python3.9 -m pip install -q -U --no-cache-dir pip \
  && rm -rf /var/lib/apt/lists/* \
  && apt-get autoremove -y \
  && apt-get clean \
  && pip install -q --no-cache-dir \
  dgl==1.0.2+cu116 -f https://data.dgl.ai/wheels/cu116/repo.html \
  torch==1.12.1+cu116 --extra-index-url https://download.pytorch.org/whl/cu116 \
  e3nn==0.3.3 \
  wandb==0.12.0 \
  pynvml==11.0.0 \
  git+https://github.com/NVIDIA/dllogger#egg=dllogger \
  decorator==5.1.0 \
  hydra-core==1.3.2 \
  pyrsistent==0.19.3 \
  /app/RFdiffusion/env/SE3Transformer \
  && pip install --no-cache-dir /app/RFdiffusion --no-deps
  
WORKDIR /app/RFdiffusion

ENV DGLBACKEND="pytorch"

ENTRYPOINT ["python3.9", "scripts/run_inference.py"]
