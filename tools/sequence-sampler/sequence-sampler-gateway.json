{
    "name": "sequence-sampler v0.1 (beta)",
    "description": "Evolutionary sampling of sequences.",
    "author": "Convexity Labs",
    "github": "https://github.com/sokrypton/ColabDesign",
    "paper": "https://www.nature.com/articles/s41586-023-06415-8",
    "task": "sequence design",
    "baseCommand": [
    ],
    "arguments": [
    ],
    "dockerPull": "quay.io/labdao/...",
    "gpuBool": true,
    "memoryGB": 12,
    "cpu": 3,
    "networkBool": true,
    "inputs": {
      "protein_complex": {
        "type": "file",
        "description": "Protein complex defining the design problem.",
        "array": false,
        "glob": [
          "*.pdb"
        ],
        "default": "",
        "min": "",
        "max": "",
        "example": "my_target_protein.pdb",
        "grouping": "protein complex",
        "position": "101",
        "required": true
      },
      "target_chain": {
        "type": "string",
        "description": "The chain of the target protein to design against.",
        "array": false,
        "glob": [
          ""
        ],
        "default": "A",
        "min": "",
        "max": "",
        "example": "A",
        "grouping": "protein complex",
        "position": "102",
        "required": true
      },
      "target_start_residue": {
        "type": "number",
        "description": "First residue consider on target chain.",
        "array": false,
        "glob": [
          ""
        ],
        "default": "",
        "min": "",
        "max": "",
        "example": "1",
        "grouping": "protein complex",
        "position": "103",
        "required": true
      },
      "target_end_residue": {
        "type": "number",
        "description": "Last residue consider on target chain.",
        "array": false,
        "glob": [
          ""
        ],
        "default": "",
        "min": "",
        "max": "",
        "example": "100",
        "grouping": "protein complex",
        "position": "104",
        "required": true
      },
      "binder_chain": {
        "type": "string",
        "description": "The chain of binder template.",
        "array": false,
        "glob": [
          ""
        ],
        "default": "B",
        "min": "",
        "max": "",
        "example": "B",
        "grouping": "protein complex",
        "position": "105",
        "required": true
      },
      "cutoff": {
        "type": "number",
        "description": "Distance cutoff to define inter-protein contact residues [Angstrom]",
        "array": false,
        "glob": [
          ""
        ],
        "default": "5.0",
        "min": "0.0",
        "max": "20.0",
        "example": "5.0",
        "grouping": "auto prompt parameters",
        "position": "201",
        "required": true
      },
      "domain_distance_threshold": {
        "type": "number",
        "description": "Minimum number of residues separating distinct domains",
        "array": false,
        "glob": [
          ""
        ],
        "default": "6",
        "min": "0",
        "max": "20",
        "example": "6",
        "grouping": "auto prompt parameters",
        "position": "202",
        "required": true
      },
      "p_contact_domain_masking": {
        "type": "string",
        "description": "Probability of masking a contact domain",
        "array": false,
        "glob": [
          ""
        ],
        "default": "0.6",
        "min": "",
        "max": "",
        "example": "0.6",
        "grouping": "auto prompt parameters",
        "position": "203",
        "required": true
      },
      "p_noncontact_domain_masking": {
        "type": "string",
        "description": "Probability of masking a non-contact domain",
        "array": false,
        "glob": [
          ""
        ],
        "default": "0.1",
        "min": "",
        "max": "",
        "example": "0.1",
        "grouping": "auto prompt parameters",
        "position": "204",
        "required": true
      },
      "n_prompts": {
        "type": "number",
        "description": "Number of auto prompts generated",
        "array": false,
        "glob": [
          ""
        ],
        "default": "16",
        "min": "1",
        "max": "20",
        "example": "16",
        "grouping": "auto prompt parameters",
        "position": "205",
        "required": true
      },
      "number_of_binder_designs": {
        "type": "number",
        "description": "Number of protein binders to be designed per prompt",
        "array": false,
        "glob": [
          ""
        ],
        "default": "2",
        "min": "1",
        "max": "3",
        "example": "2",
        "grouping": "binder",
        "position": "301",
        "required": true
      }
    },
    "outputs": {
      "all_outputs": {
        "type": "Array",
        "item": "File",
        "glob": [
          "*.zip"
        ]
      },
      "best_design": {
        "type": "File",
        "item": "",
        "glob": [
          "*_best.pdb"
        ]
      },
      "scores": {
        "type": "File",
        "item": "",
        "glob": [
          "*_scores.csv"
        ]
      },
      "sample_table": {
        "type": "File",
        "item": "",
        "glob": [
          "*_samples_table.csv"
        ]
      },
      "condition_table": {
        "type": "File",
        "item": "",
        "glob": [
          "*_conditions_table.csv"
        ]
      }
    }
  }

  // Relevant inputs:

  // basic_settings:
      // experiment_name: whos-the-weakest-link
      // AF2_repeats_per_seq: 1
      // number_of_evo_cycles: 2
      // policy_flag: policy_sampling
      // max_number_of_offspring_kept: 1
      // target_seq: TLGAVQIMNGLFHIALGSLLMIHTDVCAPICITMWYPLWGGIMFIISGSLLAAADKNPRKSLVKGKMIMNSLSLFAAISGIIFLIMDIFNITISHFFKMENLNLIKAPMPYVDIHNCDPANPSEKNSLSIQYCGSIRSVFLGVFAVMLIF
      // init_permissibility_vec: 'TLGXVQ++++LFHIAL'
      // k: 1
      // temperature: 100.
      // max_levenshtein_step_size: 3
      // alphabet: 'LAGVSERTIDPKQNFYMHWC'
      // # number of AF2 repeats
      // # consider adding the dictionary which relates actions and code
      // # consider adding the set of non-tirival actions
      // # add start and end residue

  // command = [
  //   'python', 'ProteinMPNN/protein_mpnn_run.py',
  //   '--pdb_path', path_to_PDB,
  //   '--pdb_path_chains', chains_to_design,
  //   '--out_folder', output_dir,
  //   '--num_seq_per_target', '1',
  //   '--sampling_temp', '0.1',
  //   '--seed', '37',
  //   '--batch_size', '1'
]
