{"app": "diffdock", "input_cids": [], "container": "ghcr.io/labdao/diffdock:main", "params": {"repr_layers": "33", "infrence_steps": "20", "samples_per_complex": "40", "batch_size": "10", "actual_steps": "18"}, "cmd": "python datasets/esm_embedding_preparation.py --protein_ligand_csv ../inputs/index.csv --out_file ../outputs/prepared_for_esm.fasta && HOME=esm/model_weights python esm/scripts/extract.py esm2_t33_650M_UR50D ../outputs/prepared_for_esm.fasta ../outputs/esm2_output --repr_layers 33 --include per_tok && cp -r ../outputs/esm2_output data/esm2_output && python -m inference --protein_ligand_csv ../inputs/index.csv --out_dir ../outputs --inference_steps 20 --samples_per_complex 40 --batch_size 10 --actual_steps 18 --no_final_step_noise"}
{"app": "colabfold-mini", "input_cids": [], "container": "public.ecr.aws/p7l9w5o7/containerfold:latest", "params": {}, "cmd": "colabfold_batch --max-msa 32:64 --templates --num-recycle 1 /inputs /outputs/"}
{"app": "colabfold-base", "input_cids": [], "container": "public.ecr.aws/p7l9w5o7/containerfold:latest", "params": {}, "cmd": "for seed in 1 2 3 4 5; do colabfold_batch --max-msa 32:64 --templates --num-recycle 1 /inputs /outputs/seed_$seed; done"}
{"app": "colabfold-standard", "input_cids": [], "container": "public.ecr.aws/p7l9w5o7/containerfold:latest", "params": {}, "cmd": "for seed in 1 2 3 4 5; do colabfold_batch --templates --num-recycle 3 /inputs /outputs/seed_$seed; done"}    
{"app": "colabfold-large", "input_cids": [], "container": "public.ecr.aws/p7l9w5o7/containerfold:latest", "params": {}, "cmd": "for seed in 1 2 3 4 5; do colabfold_batch --use-gpu-relax --amber --templates --num-recycle 3 /inputs /outputs/seed_$seed; done"}
{"app": "gnina", "input_cids": [], "container": "gnina/gnina:v1.0.1", "params": {"cnn_scoring": "rescore", "score_only": "true", "autobox_ligand": "true", "exhaustiveness": "64"}, "cmd": "'while IFS=, read -r protein ligand; do if [ \"${protein}\" != \"protein_path\" ]; then protein_short=$(basename \"${protein}\" .pdb); ligand_short=$(basename \"${ligand}\" .sdf); gnina -r \"${protein}\" -l \"${ligand}\"  --score_only --cnn_scoring rescore -o \"/outputs/${protein_short}_${ligand_short}_scored.sdf\"; fi; done < /inputs/index.csv'"}
{"app": "equibind", "input_cids": [], "container": "ghcr.io/labdao/equibind:main@sha256:ae2cec63b3924774727ed1c6c8af95cf4aaea2d3f0c5acbec56478505ccb2b07", "params": {}, "cmd":"while IFS=, read -r protein ligand; do if [ \"${protein}\" != \"protein_path\" ]; then protein_short=$(basename \"${protein}\" .pdb); ligand_short=$(basename \"${ligand}\" .sdf); python main.py --protein \"/inputs/${protein_short}.pdb\" --small_molecule_library \"/inputs/${ligand_short}.sdf\" && mv /outputs/ligands_predicted.sdf \"/outputs/${protein_short}_${ligand_short}_predicted.sdf\" && rm -r /outputs/dummy && cp \"/inputs/${protein_short}.pdb\" \"/outputs/\"; fi; done < /inputs/index.csv"}
{"app": "equibindls", "input_cids": [], "container": "ghcr.io/labdao/equibind:main@sha256:ae2cec63b3924774727ed1c6c8af95cf4aaea2d3f0c5acbec56478505ccb2b07", "params": {}, "cmd": "ls /inputs"}
{"app": "oddt", "input_cids": [], "container": "ghcr.io/labdao/oddt:main", "params": {}, "cmd": "while IFS=, read -r protein ligand; do if [ \"${protein}\" != \"protein_path\" ]; then protein_short=$(basename \"${protein}\" .pdb); ligand_short=$(basename \"${ligand}\" .sdf); oddt_cli $ligand --receptor $protein --score rfscore_v1 --score rfscore_v2 --score rfscore_v3 --score nnscore -O /outputs/${protein_short}_${ligand_short}_scored.sdf; fi; done < /inputs/index.csv && cd /outputs && ../aggregate_score.sh"}
