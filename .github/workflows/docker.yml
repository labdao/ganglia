# Reusable workflow for building docker containers
---

name: Build docker container
on:
  workflow_call:
    inputs:
      name:
        description: 'name of the container image'
        required: true
        type: string
      context:
        description: 'build context'
        required: false
        type: string
        default: "."
      build-args:
        description: 'build args'
        required: false
        type: string
        default: ""
      tag-suffix:
        description: 'container tag suffix'
        required: false
        type: string
        default: ""
      run-disk-space-cleanup:
        description: 'Boolean flag whether clean script is required on the runner. Should set it to true for large images'
        required: false
        type: boolean
        default: false
      registry:
        description: 'container registry'
        required: false
        type: string
        default: 'quay.io'
      registry-org-name:
        description: 'container registry org name'
        required: false
        type: string
        default: 'labdao'
      deploy-environment:
        description: 'environemnt to deploy into'
        required: false
        type: string

jobs:
  container-build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Inputs
        id: docker-build-and-push-inputs
        run: |
          echo "## INPUTS" >> $GITHUB_STEP_SUMMARY
          echo "| INPUT NAME | INPUT VALUE |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|"  >> $GITHUB_STEP_SUMMARY
          echo "| name | ${{ inputs.name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| context | ${{ inputs.context }} |" >> $GITHUB_STEP_SUMMARY
          echo "| build-args | ${{ inputs.build-args }} |" >> $GITHUB_STEP_SUMMARY
          echo "| tag-suffix | ${{ inputs.tag-suffix }} |" >> $GITHUB_STEP_SUMMARY
          echo "| run-disk-space-cleanup | ${{ inputs.run-disk-space-cleanup }} |" >> $GITHUB_STEP_SUMMARY
          echo "| registry | ${{ inputs.registry }} |" >> $GITHUB_STEP_SUMMARY
          echo "| registry-org-name | ${{ inputs.registry-org-name }} |" >> $GITHUB_STEP_SUMMARY

      - name: Checkout
        uses: actions/checkout@v4

      - name: Free Disk Space
        run: .github/scripts/free-disk-space.sh
        if: ${{ inputs.run-disk-space-cleanup }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.registry-org-name }}/${{inputs.name}}
          tags: |
            type=ref,suffix=${{ inputs.tag-suffix }},event=branch
            type=ref,suffix=${{ inputs.tag-suffix }},event=pr
            type=ref,suffix=${{ inputs.tag-suffix }},event=tag
            type=sha,suffix=${{ inputs.tag-suffix }}

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.LABDAO_QUAY_USERNAME }}
          password: ${{ secrets.LABDAO_QUAY_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        id: build-and-push
        with:
          build-args: ${{ inputs.build-args }}|
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          context: ${{ inputs.context }}
          # TODO dirty hack to make frontend work
          secrets: |
            NEXT_PUBLIC_PRIVY_APP_ID=${{ secrets.NEXT_PUBLIC_PRIVY_APP_ID }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image output
        id: docker-build-and-push-outputs
        env:
          DOCKER_IMAGE_NAME: "${{ inputs.name }}"
          DOCKER_IMAGE: "${{ inputs.registry }}/${{ inputs.registry-org-name }}/${{ inputs.name }}@${{ steps.build-and-push.outputs.digest }}"
        run: |
          echo "## OUTPUTS" >> $GITHUB_STEP_SUMMARY
          echo '**${{ env.DOCKER_IMAGE_NAME }}** image available at:' >>  $GITHUB_STEP_SUMMARY
          echo '`${{ env.DOCKER_IMAGE }}`' >>  $GITHUB_STEP_SUMMARY
          echo 'IMAGE=${{ env.DOCKER_IMAGE }}' >> $GITHUB_OUTPUT

      - name: Trigger deploy to stg
        id: deploy-to-ecs
        if: |
          github.ref == 'ref/heads/main' &&
          (inputs.name == 'backend' ||
          (inputs.name == 'frontend' && inputs.deploy-environment == 'stg'))
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh workflow run 'Deploy to ECS' -f "image=${{ steps.docker-build-and-push-outputs.outputs.IMAGE }}" -f "container=${{ inputs.name }}" -f "environment=${{ inputs.deploy-environment }}"
