# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  test:
    runs-on: ubuntu-20.04
    environment: ci
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.20.3
    
    - name: Install dependencies
      run: go mod download

    - name: Build
      run: go build

    - name: Test
      env:
        PLEX_ACCESS_TOKEN: ${{ secrets.PLEX_ACCESS_TOKEN }}
      run: go test ./... -v

    - name: Run Equibind
      run: |
        result_dir=$(./plex create -t tools/equibind.json -i testdata/binding/pdbbind_processed_size1 --autoRun=true | grep 'Finished processing, results written to' | sed -n 's/^.*Finished processing, results written to //p' | sed 's/\/io.json//')
        cd "$result_dir/entry-0/outputs"
        if [ "$(find . -name '*docked.sdf' | grep 'docked.sdf')" == "" ]; then
          echo "No docked files found"
          exit 1
        else
          echo "Docked files found:"
          find . -name '*docked.sdf' | grep 'docked.sdf'
        fi
      env:
        PLEX_ACCESS_TOKEN: ${{ secrets.PLEX_ACCESS_TOKEN }}
